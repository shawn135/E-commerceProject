Phase 1: Design architecture diagram: See file titled untitled drawing

Phase 2: Infrastructure as Code (IaC)
We'll start setting up the VPC, subnets, and security groups using AWS CloudFormation. 

Copy the YAML below.
Open the AWS CloudFormation Console.
Create a new stack and upload this YAML as the template.
Deploy the stack.

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyECommerceVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation



    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable


RESOURCES CREATED ARE:
VPC
Public and Private subnets
Internet Gateway
Routing Tables

STEP 3: ADD SECURITY GROUPS

using the following code, we can create another stack to connect security groups to each resource and update your stack:

  ApiGatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP/S traffic to API Gateway"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow Lambda to access RDS and EC2"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'  # For RDS MySQL
          ToPort: '3306'
          CidrIp: 10.0.2.0/24  # Private subnet range

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow ELB to access EC2 instances"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ApiGatewaySecurityGroup

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow EC2 instances to access RDS"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'  # For MySQL
          ToPort: '3306'
          CidrIp: 10.0.2.0/24  # Private subnet range


STEP 4: SETTING UP SERVICES

Now we create a Python microservice. this will mimic returning product details (like an API endpoint)

from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/products', methods=['GET'])
def get_products():
    # Simulating a product catalog with static data
    products = [
        {"id": 1, "name": "Laptop", "price": 799},
        {"id": 2, "name": "Smartphone", "price": 499}
    ]
    return jsonify(products)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)



Then we create a docker file to package the Python file (You will need to install Docker to your computer)
FROM python:3.8-slim

WORKDIR /app

COPY . /app

RUN pip install -r requirements.txt

EXPOSE 5000

CMD ["python", "app.py"]



STEP 5: BUILD DOCKER IMAGE

I creaded a sub folder and placed app.py and requirements.txt into it
run the following code: docker build -t product-catalog .

# Use a Python base image
FROM python:3.8-slim

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY ./e-commerce-code /app

# Install the required dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Set the environment variable for Flask to run in production
ENV FLASK_APP=app.py
ENV FLASK_ENV=production

# Expose the port the app runs on
EXPOSE 5000

# Command to run the application
CMD ["flask", "run", "--host=0.0.0.0"]

Step 6: Create Amazon Elastic Container Registry
Go to AWS console, ECR, and create repository. Selete View Push Commands and follow the steps and log into your ECR
After several minutes the build will be completed

Step 7: Deploy
Go to the ECS console and create a Cluster
Next go to Task definitions on the left side of the console
Create new task definition

Click Add Container.

In the Add container dialog box:

Container Name: Enter a name (e.g., product-catalog).
Image: Use your ECR image URI, which looks like:
<aws_account_id>.dkr.ecr.<region>.amazonaws.com/product-catalog:latest

Replace <aws_account_id> and <region> with your actual AWS account ID and region.

Port Mappings:

Container port: Enter the port your Flask app listens on (e.g., 5000).
Protocol: Select TCP.

CloudWatch is automatically set up here


Defining the container using the Amazon ECR image and setting up the container port involves creating an ECS Task Definition. Here’s how to do it step by step:

Step 1: Access ECS Console
Go to the Amazon ECS Console.
In the left-hand menu, click Task Definitions.
Click the Create new Task Definition button.
Step 2: Choose Launch Type
You’ll need to decide whether to use Fargate (serverless) or EC2 (managed by EC2 instances). For simplicity, let’s use Fargate (no need to manage EC2 instances).

Select Fargate as the launch type compatibility.
Click Next Step.
Step 3: Configure the Task Definition
Task Definition Name:
Provide a name (e.g., product-catalog-task).

Task Role:
Choose the appropriate IAM role that grants your task permissions to access AWS services (e.g., pulling the ECR image or accessing RDS).

Network Mode:
Select awsvpc. This is required for Fargate and allows assigning the container an IP address.

Task Size:
Specify the task size:

Task Memory: Choose the required memory (e.g., 0.5GB for testing).
Task CPU: Choose the required CPU (e.g., 256 vCPU for testing).
Step 4: Add Container to the Task Definition
Click Add Container.

In the Add container dialog box:

Container Name: Enter a name (e.g., product-catalog).
Image: Use your ECR image URI, which looks like:
php
Copy code
<aws_account_id>.dkr.ecr.<region>.amazonaws.com/product-catalog:latest
Replace <aws_account_id> and <region> with your actual AWS account ID and region.
Port Mappings:

Container port: Enter the port your Flask app listens on (e.g., 5000).
Protocol: Select TCP.
Step 5: Configure Optional Settings (Logging, Health Checks)
Log Configuration:

Set up logging to Amazon CloudWatch.
Choose awslogs as the log driver and configure the log group.
Health Checks (Optional):

Define a health check endpoint (e.g., /health) to monitor the container’s health.
Click Add to save the container configuration.

Step 6: Review and Create the Task Definition
After adding the container, review all the settings for the task definition.
Click Create to save the task definition.
Step 7: Deploy the Task Using ECS Service
Go back to the ECS Console and click on Clusters.

Create a new cluster or use an existing one.

Create a Service:

Choose the task definition you just created.
Specify the desired number of tasks (e.g., 1 for testing).
Select a load balancer if needed (or skip for now).
Assign a VPC and Subnets to your service.
Click Create Service.

Step 8: Test the Deployed Container
Once the service is up and running, get the public IP or DNS of the task and test the Flask app using a web browser or curl.





